bestlam
out=glmnet(x.train,y.train,alpha=1,lambda=grid)
lasso.coef=predict(out,type="coefficients",s=bestlam)
lasso.coef
lasso.pred <- predict(lasso.mod, s = bestlam, newx = x.train)
mean((lasso.pred - y.train)^2)
cbind(ridge.pred, y.train)
cbind(ridge.pred, y.train, (ridge.pred - y.train)^2)
View(df_neighborhoods_final_train)
View(df_neighborhoods_final_train)
# Best Subset Selection
regfit.full <- regsubsets(SalesPrice ~ ., df_neighborhoods_final_train)
# Best Subset Selection
regfit.full <- regsubsets(SalePrice ~ ., df_neighborhoods_final_train)
?regsubsets
# Forward Stepwise Selection
regit.fwd <- regsubsets(SalePrice~.,data=df_neighborhoods_final_train, nvmax=85, method="forward")
regit.fwd.summary <- summary(regit.fwd)
min_cp.fwd <- which.min(regit.fwd.summary$cp) # 22 Variables
dim(df_neighborhoods_final_train)
# Forward Stepwise Selection
regit.fwd <- regsubsets(SalePrice~.,data=df_neighborhoods_final_train, nvmax=86, method="forward")
regit.fwd.summary <- summary(regit.fwd)
min_cp.fwd <- which.min(regit.fwd.summary$cp) # 22 Variables
min_bic.fwd <- which.min(regit.fwd.summary$bic) # 18 Variables
max_adjr2.fwd <- which.max(regit.fwd.summary$adjr2) # 34 Variables
plot(regit.fwd.summary$rss, xlab="Number of Variables", ylab="RSS", type="l")
plot(regit.fwd.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
points(max_adjr2.fwd, regit.fwd.summary$adjr2[max_adjr2.fwd], col="red", cex=2, pch=20)
plot(regit.fwd.summary$cp, xlab="Number of Variables", ylab="Cp", type="l")
points(min_cp.fwd, regit.fwd.summary$cp[min_cp.fwd], col="red", cex=2, pch=20)
plot(regit.fwd.summary$bic, xlab="Number of Variables", ylab="BIC", type="l")
points(min_bic.fwd, regit.fwd.summary$bic[min_bic.fwd], col="red", cex=2, pch=20)
regit.fwd.summary
regit.fwd
regit.fwd.summary
names(regit.fwd.summary)
regit.fwd.summary$cp
regit.fwd.summary$outmat
regit.fwd.summary$obj
regit.fwd.summary$outmat
regit.fwd.summary$outmat[20, ]
regit.fwd.summary$outmat[20, ] == "*"
which(regit.fwd.summary$outmat[20, ] == "*")
names(which(regit.fwd.summary$outmat[20, ] == "*"))
linear_forward_cp_vars <- names(which(regit.fwd.summary$outmat[min_cp.fwd, ] == "*"))
linear_forward_bic_vars <- names(which(regit.fwd.summary$outmat[min_bic.fwd, ] == "*"))
linear_forward_adjr2_vars <- names(which(regit.fwd.summary$outmat[max_adjr2.fwd, ] == "*"))
lm(SalePrice ~ linear_forward_cp_vars)
?lm
lm(SalePrice ~ linear_forward_cp_vars, data = df_neighborhoods_final_train)
linear_forward_cp_vars
str(linear_forward_cp_vars)
lm(paste("SalePrice ~ ",linear_forward_cp_vars,sep=""), data = df_neighborhoods_final_train)
linear_forward_cp_model <- lm(paste("SalePrice ~ ",linear_forward_cp_vars,sep=""), data = df_neighborhoods_final_train)
linear_forward_cp_model
linear_forward_cp_vars
paste(linear_forward_cp_vars, sep="+")
?c
paste(as.vector(linear_forward_cp_vars), sep="+")
as.vector(linear_forward_cp_vars)
paste(linear_forward_cp_vars)
paste(linear_forward_cp_vars, sep="+")
FUCK
paste(linear_forward_cp_vars, sep="+", collapse="")
paste(linear_forward_cp_vars, sep="+", collapse="+")
paste(linear_forward_cp_vars, collapse="+")
linear_forward_cp_vars <- paste(names(which(regit.fwd.summary$outmat[min_cp.fwd, ] == "*")), collapse="+")
linear_forward_bic_vars <- paste(names(which(regit.fwd.summary$outmat[min_bic.fwd, ] == "*")), collapse="+")
linear_forward_adjr2_vars <- paste(names(which(regit.fwd.summary$outmat[max_adjr2.fwd, ] == "*")), collapse="+")
paste("SalePrice ~ ",linear_forward_cp_vars,sep="")
linear_forward_cp_model <- lm(paste("SalePrice ~ ",linear_forward_cp_vars,sep=""), data = df_neighborhoods_final_train)
linear_forward_cp_model
predict(linear_forward_cp_model, df_neighborhoods_final_validation)
cbind(predict(linear_forward_cp_model, df_neighborhoods_final_validation), df_neighborhoods_final_validation$SalePrice)
linear_forward_bic_model <- lm(paste("SalePrice ~ ",linear_forward_bic_vars,sep=""), data = df_neighborhoods_final_train)
linear_forward_adjr2_model <- lm(paste("SalePrice ~ ",linear_forward_adjr2_vars,sep=""), data = df_neighborhoods_final_train)
# Storing the predictions for each model against the validation data.
linear_forward_cp_model.pred <- predict(linear_forward_cp_model, df_neighborhoods_final_validation)
linear_forward_bic_model.pred <- predict(linear_forward_bic_model, df_neighborhoods_final_validation)
linear_forward_adjr2_model.pred <- predict(linear_forward_adjr2_model, df_neighborhoods_final_validation)
# Calculating MSE for each model
mean((linear_forward_cp_model.pred - df_neighborhoods_final_validation$SalePrice)^2)
mean((linear_forward_bic_model.pred - df_neighborhoods_final_validation$SalePrice)^2)
mean((linear_forward_adjr2_model.pred - df_neighborhoods_final_validation$SalePrice)^2)
plot(linear_forward_cp_model)
library(MASS)
bc <- boxcox(paste("SalePrice ~ ",linear_forward_cp_vars,sep=""))
paste("SalePrice ~ ",linear_forward_cp_vars,sep="")
bc <- boxcox(SalePrice ~ BldgType1Fam+BsmtFinSF1+BsmtFinType1GLQ+BsmtFinType1Unf+BsmtQualNA+Fireplaces+FullBath+GrLivArea+HalfBath+HeatingOthW+HeatingQCEx+HouseStyle1Story+KitchenQualEx+LotConfigFR2+LotShapeIR2+LotShapeIR3+LotFrontage+OverallCond+OverallQual+YearBuilt+YrSold+NeighborhoodCollegeCr)
?boxcox
bc <- boxcox(linear_forward_cp_model)
(lambda <- bc$x[which.max(bc$y)])
new_model <- lm(((SalePrice^lambda-1)/lambda) ~ BldgType1Fam+BsmtFinSF1+BsmtFinType1GLQ+BsmtFinType1Unf+BsmtQualNA+Fireplaces+FullBath+GrLivArea+HalfBath+HeatingOthW+HeatingQCEx+HouseStyle1Story+KitchenQualEx+LotConfigFR2+LotShapeIR2+LotShapeIR3+LotFrontage+OverallCond+OverallQual+YearBuilt+YrSold+NeighborhoodCollegeCr)
new_model <- lm(((SalePrice^lambda-1)/lambda) ~ BldgType1Fam+BsmtFinSF1+BsmtFinType1GLQ+BsmtFinType1Unf+BsmtQualNA+Fireplaces+FullBath+GrLivArea+HalfBath+HeatingOthW+HeatingQCEx+HouseStyle1Story+KitchenQualEx+LotConfigFR2+LotShapeIR2+LotShapeIR3+LotFrontage+OverallCond+OverallQual+YearBuilt+YrSold+NeighborhoodCollegeCr, data = df_neighborhoods_final_train)
plot(new_model)
# Parsing the selected variables for each Cp, BIC, and Adj R^2 methods.
linear_backward_cp_vars <- paste(names(which(regit.bwd.summary$outmat[min_cp.bwd, ] == "*")), collapse="+")
linear_backward_bic_vars <- paste(names(which(regit.bwd.summary$outmat[min_bic.bwd, ] == "*")), collapse="+")
linear_backward_adjr2_vars <- paste(names(which(regit.bwd.summary$outmat[max_adjr2.bwd, ] == "*")), collapse="+")
# Storing the predictions for each model against the validation data.
linear_backward_cp_model.pred <- predict(linear_backward_cp_model, df_neighborhoods_final_validation)
# Fitting the linear models for the three selection criteria.
linear_backward_cp_model <- lm(paste("SalePrice ~ ",linear_backward_cp_vars,sep=""), data = df_neighborhoods_final_train)
linear_backward_bic_model <- lm(paste("SalePrice ~ ",linear_backward_bic_vars,sep=""), data = df_neighborhoods_final_train)
linear_backward_adjr2_model <- lm(paste("SalePrice ~ ",linear_backward_adjr2_vars,sep=""), data = df_neighborhoods_final_train)
# Storing the predictions for each model against the validation data.
linear_backward_cp_model.pred <- predict(linear_backward_cp_model, df_neighborhoods_final_validation)
linear_backward_bic_model.pred <- predict(linear_backward_bic_model, df_neighborhoods_final_validation)
linear_backward_adjr2_model.pred <- predict(linear_backward_adjr2_model, df_neighborhoods_final_validation)
### Calculating MSE for each model
mean((linear_backward_cp_model.pred - df_neighborhoods_final_validation$SalePrice)^2) # 1006790081
mean((linear_backward_bic_model.pred - df_neighborhoods_final_validation$SalePrice)^2) # 956447763
mean((linear_backward_adjr2_model.pred - df_neighborhoods_final_validation$SalePrice)^2) # 1068484673
y.validation <- df_neighborhoods_scaled_validation$SalePrice
ridge.pred <- predict(ridge.mod, s = bestlam, newx = x.validation)
x.validation <- model.matrix(SalePrice~.,df_neighborhoods_scaled_validation)[,-1]
y.validation <- df_neighborhoods_scaled_validation$SalePrice
ridge.pred <- predict(ridge.mod, s = bestlam, newx = x.validation)
mean((ridge.pred - y.validation)^2) # 1151704678
## Ridge Regression
x.train <- model.matrix(SalePrice~.,df_neighborhoods_scaled_train)[,-1]
y.train <- df_neighborhoods_scaled_train$SalePrice
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x.train,y.train,alpha=0,lambda=grid)
set.seed(1)
cv.out=cv.glmnet(x.train,y.train,alpha=0)
plot(cv.out)
bestlam=cv.out$lambda.min
bestlam # 215004.4
out=glmnet(x.train,y.train,alpha=0)
predict(out,type="coefficients",s=bestlam)
x.validation <- model.matrix(SalePrice~.,df_neighborhoods_scaled_validation)[,-1]
y.validation <- df_neighborhoods_scaled_validation$SalePrice
ridge.pred <- predict(ridge.mod, s = bestlam, newx = x.validation)
mean((ridge.pred - y.validation)^2) # 967189836
ridge.pred <- predict(ridge.mod, s = bestlam, newx = x.validation)
mean((ridge.pred - y.validation)^2) # 967189836
## Ridge Regression
x.train <- model.matrix(SalePrice~.,df_neighborhoods_scaled_train)[,-1]
y.train <- df_neighborhoods_scaled_train$SalePrice
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x.train,y.train,alpha=0,lambda=grid)
set.seed(1)
cv.out=cv.glmnet(x.train,y.train,alpha=0)
plot(cv.out)
bestlam=cv.out$lambda.min
bestlam # 215004.4
out=glmnet(x.train,y.train,alpha=0)
predict(out,type="coefficients",s=bestlam)
x.validation <- model.matrix(SalePrice~.,df_neighborhoods_scaled_validation)[,-1]
y.validation <- df_neighborhoods_scaled_validation$SalePrice
ridge.pred <- predict(ridge.mod, s = bestlam, newx = x.validation)
mean((ridge.pred - y.validation)^2) # 967189836
# Lasso
x.train <- model.matrix(SalePrice~.,df_neighborhoods_scaled_train)[,-1]
y.train <- df_neighborhoods_scaled_train$SalePrice
lasso.mod=glmnet(x.train,y.train,alpha=1,lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out=cv.glmnet(x.train,y.train,alpha=1)
plot(cv.out)
bestlam=cv.out$lambda.min
bestlam # 15525.06
out=glmnet(x.train,y.train,alpha=1,lambda=grid)
lasso.coef=predict(out,type="coefficients",s=bestlam)
lasso.coef
x.validation <- model.matrix(SalePrice~.,df_neighborhoods_scaled_validation)[,-1]
y.validation <- df_neighborhoods_scaled_validation$SalePrice
lasso.pred <- predict(lasso.mod, s = bestlam, newx = x.validation)
mean((lasso.pred - y.train)^2) # 1569169841
mean((lasso.pred - y.validation)^2) # 1569169841
dim(df_neighborhoods_final_train)
rf.neighborhoods <- randomForest(SalePrice~., data = df_neighborhoods_final_train, mtry=85, importance=TRUE, ntree=100)
# Random Forest Regression
library(randomForest)
set.seed(580)
rf.neighborhoods <- randomForest(SalePrice~., data = df_neighborhoods_final_train, mtry=85, importance=TRUE, ntree=100)
rf.pred <- predict(rf.neighborhoods, newdata = df_neighorhoods_final_validation)
rf.pred <- predict(rf.neighborhoods, newdata = df_neighborhoods_final_validation)
mean((rf.pred - y.validation)^2)
importance(rf.neighborhoods)
plot(rf.neighborhoods)
plot(new_model)
paste("SalePrice ~ ",linear_forward_bic_vars,sep="")
new_model <- lm(((SalePrice^lambda-1)/lambda) ~ BldgType1Fam+BsmtFinSF1+BsmtFinType1GLQ+BsmtFinType1Unf+BsmtQualNA+Fireplaces+FullBath+GrLivArea+HalfBath+HeatingOthW+HouseStyle1Story+KitchenQualEx+LotShapeIR3+LotFrontage+OverallCond+OverallQual+YearBuilt+NeighborhoodCollegeCr, data = df_neighborhoods_final_train)
plot(new_model)
View(df_neighborhoods_final_train)
View(df_neighborhoods_final_train)
plot(linear_backward_bic_model)
#### Calculating MSE for each model
mse_linear_forward_cp_model <- mean((linear_forward_cp_model.pred - df_neighborhoods_final_validation$SalePrice)^2) # 1006790081
mse_linear_forward_bic_model <- mean((linear_forward_bic_model.pred - df_neighborhoods_final_validation$SalePrice)^2) # 956447763
mse_linear_forward_adjr2_model <- mean((linear_forward_adjr2_model.pred - df_neighborhoods_final_validation$SalePrice)^2) # 1068484673
### Calculating MSE for each model
mse_linear_backward_cp_model <- mean((linear_backward_cp_model.pred - df_neighborhoods_final_validation$SalePrice)^2) # 902472200
mse_linear_backward_bic_model <- mean((linear_backward_bic_model.pred - df_neighborhoods_final_validation$SalePrice)^2) # 867542533
mse_linear_backward_adjr2_model <- mean((linear_backward_adjr2_model.pred - df_neighborhoods_final_validation$SalePrice)^2) # 915621549
mse_ridge_regression <- mean((ridge.pred - y.validation)^2) # 1548617820
mse_ridge_regression
mse_lasso <- mean((lasso.pred - y.validation)^2) # 1800027642
mse_random_forst <- mean((rf.pred - y.validation)^2) #703846773
plot(lasso.mod)
plot(cv.out)
bestlam
names(cv.out)
#### Calculating MSE for each model
mse_linear_forward_cp_model <- cbind("Linear Forward Selected Cp",mean((linear_forward_cp_model.pred - df_neighborhoods_final_validation$SalePrice)^2)) # 1006790081
#### Calculating MSE for each model
mse_linear_forward_cp_model <- c("Linear Forward Selected Cp",mean((linear_forward_cp_model.pred - df_neighborhoods_final_validation$SalePrice)^2)) # 1006790081
mse_linear_forward_cp_model
mse_linear_forward_bic_model <- c("Linear Forward Selected BIC",mean((linear_forward_bic_model.pred - df_neighborhoods_final_validation$SalePrice)^2)) # 956447763
mse_linear_forward_adjr2_model <- c("Linear Forward Selected Adj R^2",mean((linear_forward_adjr2_model.pred - df_neighborhoods_final_validation$SalePrice)^2)) # 1068484673
### Calculating MSE for each model
mse_linear_backward_cp_model <- c("Linear Backward Selected Cp",mean((linear_backward_cp_model.pred - df_neighborhoods_final_validation$SalePrice)^2)) # 902472200
mse_linear_backward_bic_model <- c("Linear Backward Selected BIC",mean((linear_backward_bic_model.pred - df_neighborhoods_final_validation$SalePrice)^2)) # 867542533
mse_linear_backward_adjr2_model <- c("Linear Backward Selected Adj R^2",mean((linear_backward_adjr2_model.pred - df_neighborhoods_final_validation$SalePrice)^2)) # 915621549
mse_ridge_regression <- c("Ridge Regression",mean((ridge.pred - y.validation)^2)) # 1548617820
## Set Train Control
train_control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
search = "random",
verboseIter = TRUE)
elastic_net_model <- train(SalePrice ~ .,
data = df_neighborhoods_scaled_train,
method = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 25,
trControl = train_control)
elastic_net_model
elastic_net_model <- train(SalePrice ~ .,
data = df_neighborhoods_scaled_train,
method = "glmnet",
tuneLength = 25,
trControl = train_control)
elastic_net.pred <- predict(elastic_net_model, newx = x.validation)
mse_elastic_net <- c("Elastic Net",mean((elastic_net.pred - y.validation)^2))
elastic_net.pred
x.validation <- model.matrix(SalePrice~.,df_neighborhoods_scaled_validation)[,-1]
y.validation <- df_neighborhoods_scaled_validation$SalePrice
elastic_net.pred <- predict(elastic_net_model, newx = x.validation)
mse_elastic_net <- c("Elastic Net",mean((elastic_net.pred - y.validation)^2))
dim(elastic_net.pred)
elastic_net.pred
length(elastic_net.pred)
length(y.validation)
lasso.pred
elastic_net.pred <- data.frame(predict(elastic_net_model, newx = x.validation))
elastic_net.pred
elastic_net.pred <- predict(elastic_net_model, newx = x.validation)
names(elastic_net.pred)
elastic_net.pred
?data.frame
elastic_net.pred <- data.frame(predict(elastic_net_model, newx = x.validation))
names(elastic_net.pred)
elastic_net.pred$predict.elastic_net_model..newx...x.validation.
dim(elastic_net.pred$predict.elastic_net_model..newx...x.validation.)
length(elastic_net.pred$predict.elastic_net_model..newx...x.validation.)
dim(x.train)
dim(x.validation)
elastic_net.pred <- data.frame(predict(elastic_net_model, newx = x.validation))
predict(elastic_net_model, x.validation)
x.validaiton
x.validation
elastic_net_model
elastic_net.pred <- predict(elastic_net_model, newx = x.validation)
elastic_net.pred
## Set Train Control
set.seed(580)
train_control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5,
search = "random",
verboseIter = TRUE)
elastic_net_model <- train(SalePrice ~ .,
data = df_neighborhoods_scaled_train,
method = "glmnet",
tuneLength = 25,
trControl = train_control)
x.validation <- model.matrix(SalePrice~.,df_neighborhoods_scaled_validation)[,-1]
y.validation <- df_neighborhoods_scaled_validation$SalePrice
elastic_net.pred <- predict(elastic_net_model, newx = x.validation)
mse_elastic_net <- c("Elastic Net",mean((elastic_net.pred - y.validation)^2))
mse_elastic_net <- c("Elastic Net",mean((elastic_net.pred - y.train)^2))
mse_elastic_net
elastic_net_model$bestTune
elastic_net.pred <- elastic_net_model %>% predict(x.validation)
View(x.train)
View(x.train)
elastic_net_model <- train(SalePrice ~ .,
data = x.train,
method = "glmnet",
tuneLength = 25,
trControl = train_control)
elastic_net_model <- train(SalePrice ~ .,
data = model.matrix(SalePrice~.,df_neighborhoods_scaled_train),
method = "glmnet",
tuneLength = 25,
trControl = train_control)
elastic_net_model <- train(SalePrice ~ .,
data = model.matrix(SalePrice~.,df_neighborhoods_scaled_train),
method = "glmnet",
tuneLength = 25,
trControl = train_control)
model.matrix(SalePrice~.,df_neighborhoods_scaled_train)
elastic_net_model <- train(SalePrice ~ .,
data = df_neighborhoods_scaled_train,
method = "glmnet",
tuneLength = 25,
trControl = train_control)
x.validation <- model.matrix(SalePrice~.,df_neighborhoods_scaled_validation)[,-1]
y.validation <- df_neighborhoods_scaled_validation$SalePrice
elastic_net.pred <- elastic_net_model %>% predict(x.validation)
data("Boston", package = "MASS")
Boston
View(Boston)
View(Boston)
elastic_net_model <- train(SalePrice ~ .,
data = model.matrix(df_neighborhoods_scaled_train),
method = "glmnet",
tuneLength = 25,
trControl = train_control)
elastic_net_model <- train(SalePrice ~ .,
data = model.matrix(SalePrice~., df_neighborhoods_scaled_train),
method = "glmnet",
tuneLength = 25,
trControl = train_control)
model.matrix(SalePrice~., df_neighborhoods_scaled_train)[,-1]
elastic_net_model <- train(SalePrice ~ .,
data = model.matrix(SalePrice~., df_neighborhoods_scaled_train)[,-1],
method = "glmnet",
tuneLength = 25,
trControl = train_control)
model.matrix(SalePrice~., df_neighborhoods_scaled_train)[,-1]
elastic_net_model <- train(SalePrice ~ .,
data = cbind(x.train, y.train),
method = "glmnet",
tuneLength = 25,
trControl = train_control)
cbind(x.train, y.train)
cbind(x.train, df_neighborhoods_scaled_train$SalePrice)
df_neighborhoods_scaled_train$SalePrice
elastic_net_model <- train(SalePrice ~ .,
data = cbind(x.train, df_neighborhoods_scaled_train$SalePrice),
method = "glmnet",
tuneLength = 25,
trControl = train_control)
elastic_train_data <- cbind(x.train, y.train)
elastic_train_data
names(elastic_train_data)[names(elastic_train_data) == 'y.train'] <- 'SalePrice'
elastic_train_data
names(elastic_train_data)[names(elastic_train_data) == 'y.train']
colnames(elastic_train_data)
elastic_train_data <- cbind(x.train, y.train)
colnames(elastic_train_data)[colnames(elastic_train_data) == 'y.train'] <- 'SalePrice'
elastic_train_data
elastic_net_model <- train(SalePrice ~ .,
data = elastic_train_data,
method = "glmnet",
tuneLength = 25,
trControl = train_control)
View(elastic_train_data)
View(elastic_train_data)
x.validation <- model.matrix(SalePrice~.,df_neighborhoods_scaled_validation)[,-1]
y.validation <- df_neighborhoods_scaled_validation$SalePrice
elastic_net.pred <- elastic_net_model %>% predict(x.validation)
mse_elastic_net <- c("Elastic Net",mean((elastic_net.pred - y.validation)^2))
mse_elastic_net
mean((elastic_net.pred - y.validation)^2)
df_neighborhoods_test
View(Edwards_test)
View(Edwards_test)
## Plot histograms for numeric columns
num_cols <- colnames(select_if(df_neighborhoods_impute, is.numeric))
for(i in num_cols){
assign(paste('plot_',i,sep=""),
ggplot(data=df_neighborhoods_impute, aes_string(x=i)) + geom_histogram() + theme(text = element_text(size = 8))
)
}
ggarrange(
plot_BedroomAbvGr,
plot_BsmtFinSF1,
plot_Fireplaces,
plot_FullBath,
plot_GrLivArea,
plot_HalfBath,
plot_LotArea,
plot_LotFrontage,
plot_OpenPorchSF,
plot_OverallCond,
plot_OverallQual,
plot_SalePrice,
plot_TotRmsAbvGrd,
plot_WoodDeckSF,
plot_YearBuilt,
plot_YrSold
)
str(df_neighborhoods_final_train)
df_mse <- rbind(mse_linear_forward_cp_model,
mse_linear_forward_bic_model,
mse_linear_forward_adjr2_model,
mse_linear_backward_cp_model,
mse_linear_backward_bic_model,
mse_linear_backward_adjr2_model,
mse_ridge_regression,
mse_lasso,
mse_elastic_net)
df_mse
str(df_mse)
df_mse$index
names(df_mse)
colnames(df_mse)
colnames(df_mse) <- c("Model", "Mean Squared Error")
df_mse
str(mse_linear_backward_adjr2_model)
df_mse %>% mutate("Mean Squared Error", as.numeric("Mean Squared Error"))
df_mse$mse_lasso
str(df_mse)
as.character(df_mse$"Mean Squared Error")
df_mse <- data.frame(rbind(mse_linear_forward_cp_model,
mse_linear_forward_bic_model,
mse_linear_forward_adjr2_model,
mse_linear_backward_cp_model,
mse_linear_backward_bic_model,
mse_linear_backward_adjr2_model,
mse_ridge_regression,
mse_lasso,
mse_elastic_net))
df_mse
colnames(df_mse) <- c("Model", "Mean Squared Error")
df_mse
str(df_mse)
df_mse$`Mean Squared Error` <- as.numeric(df_mse$`Mean Squared Error`)
df_mse
df_mse %>% arrange(desc(`Mean Squared Error`))
mse_lasso
mse_lasso <- c("Lasso",mean((lasso.pred - y.validation)^2)) # 1,800,027,642
df_mse <- data.frame(rbind(mse_linear_forward_cp_model,
mse_linear_forward_bic_model,
mse_linear_forward_adjr2_model,
mse_linear_backward_cp_model,
mse_linear_backward_bic_model,
mse_linear_backward_adjr2_model,
mse_ridge_regression,
mse_lasso,
mse_elastic_net))
colnames(df_mse) <- c("Model", "Mean Squared Error")
df_mse$`Mean Squared Error` <- as.numeric(df_mse$`Mean Squared Error`)
df_mse %>% arrange(desc(`Mean Squared Error`))
# Random Forest Regression
library(randomForest)
set.seed(580)
rf.neighborhoods <- randomForest(SalePrice~., data = df_neighborhoods_final_train, mtry=85, importance=TRUE, ntree=100)
rf.pred <- predict(rf.neighborhoods, newdata = df_neighborhoods_final_validation)
mse_random_forest <- mean((rf.pred - y.validation)^2) #703846773
importance(rf.neighborhoods)
df_mse <- data.frame(rbind(mse_linear_forward_cp_model,
mse_linear_forward_bic_model,
mse_linear_forward_adjr2_model,
mse_linear_backward_cp_model,
mse_linear_backward_bic_model,
mse_linear_backward_adjr2_model,
mse_ridge_regression,
mse_random_forest,
mse_lasso,
mse_elastic_net))
colnames(df_mse) <- c("Model", "Mean Squared Error")
df_mse$`Mean Squared Error` <- as.numeric(df_mse$`Mean Squared Error`)
df_mse %>% arrange(`Mean Squared Error`)
ggplot(df_mse, aes(x = reorder(Model, `Mean Squared Error`), y = `Mean Squared Error`, fill=variable)) + geom_bar(stat = "identity")
ggplot(df_mse, aes(x = reorder(Model, `Mean Squared Error`), y = `Mean Squared Error`)) + geom_bar(stat = "identity")
#### Calculating MSE for each model
mse_linear_forward_cp_model <- c("Linear Forward Selected Cp",mean((linear_forward_cp_model.pred - df_neighborhoods_final_validation$SalePrice)^2),"Linear Regression") # 1006790081
### Calculating MSE for each model
mse_linear_forward_cp_model <- c("Linear Forward Selected Cp",mean((linear_forward_cp_model.pred - df_neighborhoods_final_validation$SalePrice)^2),"Linear Regression") # 1006790081
mse_linear_forward_bic_model <- c("Linear Forward Selected BIC",mean((linear_forward_bic_model.pred - df_neighborhoods_final_validation$SalePrice)^2),"Linear Regression") # 956447763
mse_linear_forward_adjr2_model <- c("Linear Forward Selected Adj R^2",mean((linear_forward_adjr2_model.pred - df_neighborhoods_final_validation$SalePrice)^2),"Linear Regression") # 1068484673
### Calculating MSE for each model
mse_linear_backward_cp_model <- c("Linear Backward Selected Cp",mean((linear_backward_cp_model.pred - df_neighborhoods_final_validation$SalePrice)^2),"Linear Regression") # 902472200
mse_linear_backward_bic_model <- c("Linear Backward Selected BIC",mean((linear_backward_bic_model.pred - df_neighborhoods_final_validation$SalePrice)^2),"Linear Regression") # 867542533
mse_linear_backward_adjr2_model <- c("Linear Backward Selected Adj R^2",mean((linear_backward_adjr2_model.pred - df_neighborhoods_final_validation$SalePrice)^2),"Linear Regression") # 915621549
mse_ridge_regression <- c("Ridge Regression",mean((ridge.pred - y.validation)^2),"Shrinkage") # 1,548,617,820
mse_lasso <- c("Lasso",mean((lasso.pred - y.validation)^2),"Shrinkage") # 1,800,027,642
mse_elastic_net <- c("Elastic Net",mean((elastic_net.pred - y.validation)^2),"Shrinkage") #983,506,727.699282
mse_random_forest <- mean("Random Forest",(rf.pred - y.validation)^2,"Decision Tree") #703846773
mse_random_forest <- c("Random Forest",mean((rf.pred - y.validation)^2,"Decision Tree")) #703846773
mse_random_forest <- c("Random Forest",mean((rf.pred - y.validation)^2),"Decision Tree") #703846773
## Combine the MSE resuts into one dataframe
df_mse <- data.frame(rbind(mse_linear_forward_cp_model,
mse_linear_forward_bic_model,
mse_linear_forward_adjr2_model,
mse_linear_backward_cp_model,
mse_linear_backward_bic_model,
mse_linear_backward_adjr2_model,
mse_ridge_regression,
mse_random_forest,
mse_lasso,
mse_elastic_net))
## Rename the columns
colnames(df_mse) <- c("Model", "Mean Squared Error", "Family")
df_mse$`Mean Squared Error` <- as.numeric(df_mse$`Mean Squared Error`)
# Sort
df_mse %>% arrange(`Mean Squared Error`)
ggplot(df_mse, aes(x = reorder(Model, `Mean Squared Error`), y = `Mean Squared Error`, fill = Family)) + geom_bar(stat = "identity")
?randomForest
rf.neighborhoods <- randomForest(SalePrice~., data = df_neighborhoods_final_train, importance=TRUE, ntree=100)
rf.pred <- predict(rf.neighborhoods, newdata = df_neighborhoods_final_validation)
mse_random_forest <- c("Random Forest",mean((rf.pred - y.validation)^2),"Decision Tree") #703846773
mse_random_forest
0.037*93+0.074*96
0.090*12-0.021*10+0.078*20
